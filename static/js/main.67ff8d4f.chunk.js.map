{"version":3,"sources":["components/ui-components/Header/index.js","components/ui-components/Footer/index.js","fixtures/index.js","components/CostEstimationResult/index.js","components/CostEstimationForm/index.js","utils/index.js","components/ui-components/Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","paintLocationDetails","interior","paint_area","paint_types","standard","premium","super_premium","luxury","exterior","cities","total_estimation","total_paintable_area","paintable_area_type","handleGoBack","title","bordered","gutter","xs","sm","md","lg","span","id","onClick","cities_options","map","city","value","initial_paint_area","initial_paint_types","useState","submitted","setSubmitted","isLoading","setLoading","Form","useForm","form","paintArea","setPaintArea","paintTypes","setPaintTypes","currentPaintType","setCurrentPaintType","totalEstimation","setTotalEstimation","totalPaintableArea","setTotalPaintableArea","paintableAreaType","setPaintableAreaType","event","onFinish","formValues","carpet_area","location_type","paint_type","setTimeout","resetFields","message","success","onFinishFailed","errorInfo","error","console","log","Item","name","label","initialValue","hasFeedback","rules","required","options","placeholder","filterOption","inputValue","option","toUpperCase","indexOf","Group","onKeyPress","charC","which","keyCode","preventDefault","onChange","newLocationType","target","hasOwnProperty","setFieldsValue","paint_name","Button","length","paintAreaValue","index","key","str_val","charAt","slice","newPaintType","Object","keys","paintType","paintNames","paintName","htmlType","loading","Content","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.67ff8d4f.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Header.css\";\n\nimport { Layout } from \"antd\";\n\nexport default () => {\n  return (\n    <Layout.Header className=\"header-section\">\n      <h3>Painting Cost Estimator</h3>\n    </Layout.Header>\n  );\n};\n","import React from \"react\";\n\nimport { Layout } from \"antd\";\n\nexport default () => {\n  return <Layout.Footer>&copy; Built by Anusha Rao, 2020</Layout.Footer>;\n};\n","export const paintLocationDetails = {\n  interior: {\n    paint_area: [\"walls\", \"ceiling\", \"both\"],\n    paint_types: {\n      standard: [\"Tractor Emulsion\"],\n      premium: [\"Premium Emulsion\"],\n      super_premium: [\"Royal Luxury Emulsion\", \"Royal Matt/Shyne\"],\n      luxury: [\"Royal Atmos\", \"Royal Aspira\"],\n    },\n  },\n  exterior: {\n    paint_area: [\"walls\"],\n    paint_types: {\n      standard: [\"Ace Emulsion\"],\n      premium: [\"Apex Emulsion\"],\n      super_premium: [\"Apex Ultima\"],\n      luxury: [\"Apex Ultima Protech\"],\n    },\n  },\n};\n\nexport const cities = [\n  \"Mumbai\",\n  \"Delhi\",\n  \"Kolkata\",\n  \"Bengaluru\",\n  \"Chennai\",\n  \"Hyderabad\",\n  \"Pune\",\n  \"Ahmedabad\",\n  \"Visakhapatnam\",\n  \"Surat\",\n];\n","import React from \"react\";\n\nimport { Card, Button, Row, Col } from \"antd\";\n\nimport \"./CostEstimationResult.css\";\n\nexport default ({\n  total_estimation = 0,\n  total_paintable_area = \"0 sqft\",\n  paintable_area_type = \"Interior Walls\",\n  handleGoBack,\n}) => {\n  return (\n    <div className=\"cost-estimation-card-wrapper\">\n      <Card\n        title={\n          <div className=\"cost-estimation-title\">\n            <p>{\"Your Estimate\"}</p>\n          </div>\n        }\n        bordered={false}\n      >\n        <div className=\"cost-estimation-card\">\n          <div className=\"paint-cost-estimation\">{total_estimation}</div>\n          <div className=\"paint-area-details\">\n            <span>{paintable_area_type}</span>\n          </div>\n          <div className=\"cost-estimation-details\">\n            <Row\n              gutter={{ xs: 16, sm: 24, md: 32, lg: 40 }}\n              className=\"paintable-area\"\n            >\n              <Col className=\"gutter-row\" span={12}>\n                <span>Total Paintable Area</span>\n              </Col>\n              <Col className=\"gutter-row\" span={12}>\n                <span id=\"paintableAreaValue\">{total_paintable_area}</span>\n              </Col>\n            </Row>\n            <Row\n              className=\"paintable-cost\"\n              gutter={{ xs: 16, sm: 24, md: 32, lg: 40 }}\n            >\n              <Col span={12} className=\"gutter-row\">\n                <p>Total Cost</p>\n                <span className=\"sub-text\">(Total Paintable Area * Price)</span>\n              </Col>\n              <Col span={12} className=\"gutter-row\">\n                <span className=\"total-cost-value\">{total_estimation}</span>\n              </Col>\n            </Row>\n            <div className=\"go-back-button-wrapper\">\n              <Button\n                className=\"go-back-button primary-in-app-button\"\n                onClick={handleGoBack}\n              >\n                Go Back\n              </Button>\n            </div>\n            <div className=\"inclusion-details\">\n              <p>Inclusions & Exclusions</p>\n              <ul>\n                <li>Ceiling painting</li>\n                <li>GST as per government policies</li>\n                <li>Enamel paint shall cost extra</li>\n              </ul>\n              <div className=\"disclaimer\">\n                <p>\n                  *Disclaimer: This is an approximate estimation based on our\n                  algorithms and typical spreading rates. Results may vary\n                  according to the condition of the surfaces that you paint\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport {\n  AutoComplete,\n  Form,\n  Select,\n  Radio,\n  Button,\n  Input,\n  message,\n} from \"antd\";\n\nimport { capitalize } from \"../../utils\";\nimport { paintLocationDetails, cities } from \"../../fixtures\";\nimport CostEstimationResult from \"../CostEstimationResult\";\n\nimport \"./CostEstimationForm.css\";\n\nexport default () => {\n  const cities_options = cities.map((city) => ({ value: city }));\n  let initial_paint_area = [];\n  let initial_paint_types = {};\n  if (!!paintLocationDetails && !!paintLocationDetails.interior) {\n    initial_paint_area = !!paintLocationDetails.interior.paint_area\n      ? paintLocationDetails.interior.paint_area\n      : [];\n    initial_paint_types = !!paintLocationDetails.interior.paint_types\n      ? paintLocationDetails.interior.paint_types\n      : {};\n  }\n\n  const [submitted, setSubmitted] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const [paintArea, setPaintArea] = useState(initial_paint_area);\n  const [paintTypes, setPaintTypes] = useState(initial_paint_types);\n  const [currentPaintType, setCurrentPaintType] = useState(\"standard\");\n  const [totalEstimation, setTotalEstimation] = useState(0);\n  const [totalPaintableArea, setTotalPaintableArea] = useState(\"0 sqft\");\n  const [paintableAreaType, setPaintableAreaType] = useState(\"Interior Walls\");\n\n  const handleSubmit = (formValues) => {\n    setLoading(true);\n    const { carpet_area, location_type, paint_area, paint_type } = formValues;\n    setTimeout(() => {\n      setTotalEstimation(`Rs. ${carpet_area * 9}`);\n      setTotalPaintableArea(`${carpet_area} sqft`);\n      setPaintableAreaType(`${location_type} ${paint_area}, ${paint_type}`);\n      form.resetFields();\n      setLoading(false);\n      setSubmitted(true);\n      message.success(\"Form submitted successfully, Here is the result...\");\n    }, 1000);\n  };\n\n  const handleFailure = (errorInfo) => {\n    setLoading(false);\n    message.error(\"Please fill in all the required data and try again...\");\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const handleGoBack = (event) => {\n    setSubmitted(false);\n  };\n\n  const handleLocationTypeChange = (event) => {\n    const newLocationType = event.target.value;\n    if (\n      !!newLocationType &&\n      !!paintLocationDetails &&\n      paintLocationDetails.hasOwnProperty(newLocationType)\n    ) {\n      setPaintArea(paintLocationDetails[newLocationType].paint_area);\n      setPaintTypes(paintLocationDetails[newLocationType].paint_types);\n      form.setFieldsValue({\n        paint_name:\n          paintLocationDetails[newLocationType][\"paint_types\"][\n            currentPaintType\n          ][0],\n      });\n    }\n  };\n\n  const handlePaintTypeChange = (event) => {\n    const newPaintType = event.target.value;\n    if (!!newPaintType && !!paintLocationDetails) {\n      form.setFieldsValue({\n        paint_type: newPaintType,\n        paint_name: paintTypes[newPaintType][0],\n      });\n      setCurrentPaintType(newPaintType);\n    }\n  };\n\n  const validateInput = (event) => {\n    var charC = event.which ? event.which : event.keyCode;\n    if (charC > 31 && (charC < 48 || charC > 57)) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <div>\n      {submitted ? (\n        <CostEstimationResult\n          handleGoBack={handleGoBack}\n          total_estimation={totalEstimation}\n          total_paintable_area={totalPaintableArea}\n          paintable_area_type={paintableAreaType}\n        />\n      ) : (\n        <Form\n          onFinish={handleSubmit}\n          onFinishFailed={handleFailure}\n          form={form}\n        >\n          <Form.Item\n            name=\"city\"\n            label=\"Choose a city\"\n            initialValue={\"Bengaluru\"}\n            hasFeedback\n            rules={[\n              {\n                required: true,\n                message: \"Please enter the city name!\",\n              },\n            ]}\n          >\n            <AutoComplete\n              options={cities_options}\n              placeholder=\"Please enter the city name..\"\n              filterOption={(inputValue, option) =>\n                option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !==\n                -1\n              }\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"house_paint_application_type\"\n            label=\"Painting Type\"\n            initialValue=\"fresh_paint\"\n          >\n            <Radio.Group>\n              <Radio value=\"fresh_paint\">Fresh Paint</Radio>\n              <Radio value=\"repainting\">Repainting</Radio>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item\n            name=\"carpet_area\"\n            label=\"Carpet Area\"\n            hasFeedback\n            rules={[\n              {\n                required: true,\n                message: \"Please input the Carpet Area!\",\n              },\n            ]}\n          >\n            <Input\n              placeholder={\"Enter Carpet Area\"}\n              onKeyPress={validateInput}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"location_type\"\n            label=\"Interior/Exterior\"\n            initialValue=\"interior\"\n          >\n            <Radio.Group onChange={handleLocationTypeChange}>\n              <Radio.Button value=\"interior\">Interior</Radio.Button>\n              <Radio.Button value=\"exterior\">Exterior</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          {!!paintArea && !!paintArea.length > 0 && (\n            <Form.Item name=\"paint_area\" initialValue={paintArea[0]}>\n              <Radio.Group>\n                {paintArea.map((paintAreaValue, index) => (\n                  <Radio key={paintAreaValue + index} value={paintAreaValue}>\n                    {capitalize(paintAreaValue)}\n                  </Radio>\n                ))}\n              </Radio.Group>\n            </Form.Item>\n          )}\n\n          <Form.Item\n            name=\"paint_type\"\n            label=\"Paint Type\"\n            initialValue=\"standard\"\n          >\n            <Radio.Group onChange={handlePaintTypeChange}>\n              <Radio.Button value=\"standard\">Standard</Radio.Button>\n              <Radio.Button value=\"premium\">Premium</Radio.Button>\n              <Radio.Button value=\"super_premium\">Super-Premium</Radio.Button>\n              <Radio.Button value=\"luxury\">Luxury</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n\n          {!!paintTypes && (\n            <Form.Item\n              name=\"paint_name\"\n              initialValue={paintTypes[currentPaintType][0]}\n            >\n              <Radio.Group>\n                {Object.keys(paintTypes).map((paintType) => {\n                  let paintNames = [];\n                  if (currentPaintType === paintType) {\n                    paintNames = paintTypes[paintType];\n                  }\n\n                  return paintNames.map((paintName, index) => (\n                    <Radio key={paintName + index} value={paintName}>\n                      {paintName}\n                    </Radio>\n                  ));\n                })}\n              </Radio.Group>\n            </Form.Item>\n          )}\n          <Form.Item className=\"align-center\">\n            <Button\n              className=\"primary-in-app-button\"\n              htmlType=\"submit\"\n              loading={isLoading}\n            >\n              Calculate Now\n            </Button>\n          </Form.Item>\n        </Form>\n      )}\n    </div>\n  );\n};\n","export const capitalize = (str_val) => {\n  if (typeof str_val !== \"string\") return \"\";\n  return str_val.charAt(0).toUpperCase() + str_val.slice(1);\n};\n","import React from \"react\";\nimport { Layout } from \"antd\";\n\nimport \"./Dashboard.css\";\n\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport CostEstimationForm from \"../../CostEstimationForm\";\n\nconst { Content } = Layout;\n\nexport default () => {\n  return (\n    <Layout className=\"cost-estimation-container\">\n      <Header />\n      <Content>\n        <CostEstimationForm />\n      </Content>\n      <Footer />\n    </Layout>\n  );\n};\n","import React from \"react\";\n\nimport Dashboard from \"./components/ui-components/Dashboard\";\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}